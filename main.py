# GABRIEL ZEM MURARO


def uni√£o():
  #Cria o conjunto final
  lista_final = set()
  #Passa por todo o arquivo txt
  for op in range(len(texto)):
  #Identifica o U  
    if texto[op].strip() == "U":
  #Seleciona para trabalhar com as pr√≥ximas 2 lihas ap√≥s o U que ser√£o os conjuntos
      if op + 2 < len(texto):
  #Retira todos os espa√ßos e virgulas para que a fun√ß√£o trabalhe apenas com inteiros       
        primeira_lista = texto[op + 1].strip().split(", ")
        segunda_lista = texto[op + 2].strip().split(", ")
  #Cria um conjunto com os elementos da primeira lista e da segunda lista    
        lista_final.update(primeira_lista)
        lista_final.update(segunda_lista)
  #Remove os n√∫meros repetidos e organiza eles em ordem crescente      
        lista_final = sorted(lista_final)
  #Imprime o resultado final da Uni√£o
        return(print("Uni√£o: \nconjunto 1 {",primeira_lista,"} \nconjunto 2 {",segunda_lista,"} \nResultado: {",lista_final,"}"))    



def Intersecao():
  #Cria o conjunto final
  lista_final = set()
  #Passa por todo o arquivo txt
  for op in range(len(texto)):
  #Identifica o I
    if texto[op].strip() == "I":
  #seleciona para trabalhar com as proximas 2 lihas ap√≥s o I que ser√£o os conjuntos
      if op + 2 < len(texto):
  #Retira todos os espa√ßos e virgulas para que a fun√ß√£o trabalhe apenas com inteiros
        primeira_lista = texto[op + 1].strip().split(", ")
        segunda_lista = texto[op + 2].strip().split(", ")
  #Faz a interse√ß√£o entre os conjuntos e adiciona os elementos iguais em ordem crescente
        lista_final = set(primeira_lista).intersection(segunda_lista)
        lista_final = sorted(lista_final)
        return(print("Interse√ß√£o: \nconjunto 1 {",primeira_lista,"}\nconjunto 2 {",segunda_lista,"} \nResultado: {",lista_final,"}")) 





def Diferenca():
  #Cria o conjunto final
  lista_final = set()
  #Passa por todo o arquivo txt
  for op in range(len(texto)):
  #Identifica o I
    if texto[op].strip() == "D":
  #seleciona para trabalhar com as proximas 2 lihas ap√≥s o I que ser√£o os conjuntos
      if op + 2 < len(texto):
  #Retira todos os espa√ßos e virgulas para que a fun√ß√£o trabalhe apenas com inteiros
        primeira_lista = texto[op + 1].strip().split(", ")
        segunda_lista = texto[op + 2].strip().split(", ")
  #Faz a diferen√ßa entre os conjuntos e adiciona os elementos que est√£o apenas presentes     #no primeiro conjunto e n√£o presentes no segundo
        lista_final = set(primeira_lista) - set(segunda_lista)

        return(print("Diferen√ßa: \nconjunto 1 {",primeira_lista,"} \nconjunto 2 {",segunda_lista,"} \nResultado: {",lista_final,"}")) 
        


def Cartesiano():
  #Cria o conjunto final
  lista_final = []
  #Passa por todo o arquivo txt
  for op in range(len(texto)):
  #Identifica o I
    if texto[op].strip() == "C":
  #seleciona para trabalhar com as proximas 2 lihas ap√≥s o I que ser√£o os conjuntos
      if op + 2 < len(texto):
  #Retira todos os espa√ßos e virgulas para que a fun√ß√£o trabalhe apenas com inteiros
        primeira_lista = texto[op + 1].strip().split(", ")
        segunda_lista = texto[op + 2].strip().split(", ")

        for i in range(len(primeira_lista)):
          for j in range(len(segunda_lista)):
            lista_final.append(primeira_lista[i])
            lista_final.append(segunda_lista[j])
            #lista_final.update(segunda_lista[j])
        return(print("Produto cartesiano: \nconjunto 1 {",primeira_lista,"} \nconjunto 2 {",segunda_lista,"} \nResultado: {",lista_final,"}")) 
        



#Para selecionar qual arquivo .txt deseja que seja utilizado
SA = str(input("Digite o arquivo que deseja realizar as opera√ß√µes (No formato .txt)"))
Ar = open(SA, "r")
texto = Ar.readlines()


uni√£o()
print()
Intersecao()
print()
Diferenca()
print()
Cartesiano()






#ENUNCIADO
#Para obter os pontos relativos a este trabalho, voc√™ dever√° criar um programa, utilizando a
#linguagem Python, C, ou C++. Este programa, quando executado, ir√° apresentar os resultados de
#opera√ß√µes que ser√£o realizadas entre dois conjuntos de dados.
#O programa que voc√™ desenvolver√° ir√° receber como entrada um arquivo de texto (.txt)
#contendo v√°rios conjuntos de dados e v√°rias opera√ß√µes. Estas opera√ß√µes e dados estar√£o representadas
#em um arquivo de textos contendo apenas os dados referentes as opera√ß√µes que devem ser realizadas
#segundo a seguinte regra fixa: a primeira linha do arquivo de texto de entrada conter√° o n√∫mero de
#opera√ß√µes que est√£o descritas no arquivo, este n√∫mero de opera√ß√µes ser√° um inteiro; as linhas
#seguintes seguir√£o sempre o mesmo padr√£o de tr√™s linhas: a primeira linha apresenta o c√≥digo da
#opera√ß√£o (U para uni√£o, I para interse√ß√£o, D para diferen√ßa e C produto cartesiano), a segunda e
#terceira linhas conter√£o os elementos dos conjuntos separados por virgulas. A seguir est√° um exemplo
#das linhas que podem existir em um arquivo de testes para o programa que voc√™ ir√° desenvolver:
#4
#U
#3, 5, 67, 7
#1, 2, 3, 4
#I
#1, 2, 3, 4, 5
#4, 5
#D
#1, A, C, 34
#A, C, D, 23
#C
#3, 4, 5, 5, A, B, R
#1, B, C, D, 1
#Neste exemplo temos 4 opera√ß√µes uma uni√£o (U), uma interse√ß√£o (I), um diferen√ßa (D) e um
#produto cartesiano (C). A uni√£o, definida por U, dever√° ser executada sobre os conjuntos {ùüë, ùüì, ùüîùüï, ùüï} e
#{ùüè, ùüê, ùüë, ùüí}, cujos elementos est√£o explicitados nas linhas posteriores a defini√ß√£o da oper√ß√£o (U).
#A resposta do seu programa dever√° conter a opera√ß√£o realizada, descrita por extenso, os dados
#dos conjuntos identificados, e o resultado da opera√ß√£o. No caso da uni√£o a linha de sa√≠da dever√° conter
#a informa√ß√£o e a formata√ß√£o mostrada a seguir:
#Uni√£o: conjunto 1 {3, 5, 67, 7}, conjunto 2 {1, 2, 3, 4}. Resultado: {3, 5, 67, 7, 1, 2, 4}
#Seu programa dever√° mostrar a sa√≠da no terminal, ou em um arquivo de textos. Em qualquer
#um dos casos, a sa√≠da ser√° composta por uma linha de sa√≠da para cada opera√ß√£o constante no arquivo
#de textos de entrada formatada segundo o exemplo de sa√≠da acima. Observe as letras mai√∫sculas e
#min√∫sculas, e os pontos utilizados na formata√ß√£o da linha de sa√≠da apresenta acima.
#No caso do texto de exemplo, teremos 4 linhas, e apenas 4 linhas de sa√≠da, formatadas e
#pontuadas conforme o exemplo de sa√≠da acima. O uso de linhas extras na sa√≠da, ou erros de formata√ß√£o,
#implicam em perda de pontos como pode ser visto na rubrica de avalia√ß√£o constante neste documento.